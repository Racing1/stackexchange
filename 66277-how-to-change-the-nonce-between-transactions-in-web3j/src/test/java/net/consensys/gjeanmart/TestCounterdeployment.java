package net.consensys.gjeanmart;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;

import org.junit.Test;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
import org.web3j.protocol.core.methods.response.EthSendTransaction;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.RawTransactionManager;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class TestCounterdeployment {

    @Test
    public void test() throws Exception {

        final String privateKey = "a3d6b20ca7c450ecf2c0a310f27ac24b3990bcc7f1f83af9905a67b88c48dfc5";
        final String contractAddress = "0xbb7DE8A1d38B98106aa933aFe1bA29440bbB9C21";
        final BigInteger gasLimit = new BigInteger("6721975");
        final BigInteger gasPrice = new BigInteger("20000000000");
        
        // Connect to the node
        Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/

        // Read Private Key
        Credentials credentials = Credentials.create(privateKey);
        
        // Extract the  function from the Smart Contract wrapper generated by web3j cli
        final Function function = new Function(
                Counter.FUNC_INCREMENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        
        // Encode to data
        String data = FunctionEncoder.encode(function);
        
        // Calculate nonce
        EthGetTransactionCount ethGetTransactionCount = web3.ethGetTransactionCount(credentials.getAddress(), DefaultBlockParameterName.PENDING).send();
        log.debug("transaction count = {}", ethGetTransactionCount.getTransactionCount());
        //BigInteger nonce =  ethGetTransactionCount.getTransactionCount();
        BigInteger nonce = new BigInteger("10");
        log.debug("nonce = {}", nonce);
        
        // Prepare transaction
        RawTransaction rawTransaction = RawTransaction.createTransaction(
                nonce,
                gasPrice,
                gasLimit,
                contractAddress,
                BigInteger.ZERO,
                data);
        
        // Transaction manager
        RawTransactionManager transactionManager = new RawTransactionManager(web3, credentials);
        EthSendTransaction transaction = transactionManager.signAndSend(rawTransaction);
        
        log.debug("transaction hash = {}", transaction.getTransactionHash());
        
        //////////////////////////

        Thread.sleep(2000);
        
        // Load contract
        Counter contract = Counter.load(contractAddress, web3, credentials, gasLimit, gasLimit);
        
        BigInteger counter = contract.getCounter().send();
        log.info("counter = " + counter.intValue());
        
    }
    
}
